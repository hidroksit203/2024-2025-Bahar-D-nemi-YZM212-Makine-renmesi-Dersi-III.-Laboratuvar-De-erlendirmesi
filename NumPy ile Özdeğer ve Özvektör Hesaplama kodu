import numpy as np

# ğŸ”¹ NumPy kullanarak Ã¶zdeÄŸer ve Ã¶zvektÃ¶r hesaplama
print("ğŸ”¹ NumPy ile Hesaplama")
A = np.array([[4, 2], [1, 3]])  # Ã–rnek kare matris
eigenvalues_np, eigenvectors_np = np.linalg.eig(A)  # NumPy fonksiyonu ile hesapla
print("Ã–zdeÄŸerler:", eigenvalues_np)
print("Ã–zvektÃ¶rler:\n", eigenvectors_np)

# ğŸ”¸ Manuel yÃ¶ntemle hesaplama iÃ§in gerekli yardÄ±mcÄ± fonksiyonlar

# Determinant hesaplama (2x2 ve Ã¼stÃ¼ iÃ§in rekÃ¼rsif)
def find_determinant(matrix):
    n = len(matrix)
    if n == 2:
        return matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0]
    det = 0
    for c in range(n):
        sub_matrix = [row[:c] + row[c+1:] for row in matrix[1:]]
        sign = (-1) ** c
        det += sign * matrix[0][c] * find_determinant(sub_matrix)
    return det

# Ä°ki polinomu Ã§arpan fonksiyon (liste olarak temsil edilen polinomlar)
def list_multiply(p1, p2):
    res = [0] * (len(p1) + len(p2) - 1)
    for i in range(len(p1)):
        for j in range(len(p2)):
            res[i+j] += p1[i] * p2[j]
    return res

# Ä°ki polinomu toplayan ya da Ã§Ä±karan fonksiyon
def list_add(p1, p2, sub=False):
    length = max(len(p1), len(p2))
    res = []
    for i in range(length):
        a = p1[i] if i < len(p1) else 0
        b = p2[i] if i < len(p2) else 0
        res.append(a - b if sub else a + b)
    return res

# NxN birim matris oluÅŸturur
def identity_matrix(size):
    return [[1 if i == j else 0 for j in range(size)] for i in range(size)]

# A - Î»I matrisini liste formatÄ±nda karakteristik denklem iÃ§in oluÅŸturur
def characteristic_equation(matrix):
    size = len(matrix)
    result = []
    for i in range(size):
        row = []
        for j in range(size):
            if i == j:
                row.append([matrix[i][j], -1])  # A[i][j] - Î»
            else:
                row.append([matrix[i][j]])
        result.append(row)
    return result

# Î»'ya gÃ¶re karakteristik polinomu Ã¼retir
def determinant_equation(matrix_expr):
    size = len(matrix_expr)
    def cofactor_expansion(m):
        if len(m) == 2:
            return list_add(
                list_multiply(m[0][0], m[1][1]),
                list_multiply(m[0][1], m[1][0]), sub=True
            )
        result = [0]
        for c in range(len(m)):
            sub = [row[:c] + row[c+1:] for row in m[1:]]
            term = list_multiply(m[0][c], cofactor_expansion(sub))
            if c % 2 == 1:
                term = [-t for t in term]
            result = list_add(result, term)
        return result
    return cofactor_expansion(matrix_expr)

# Ã–zdeÄŸerleri bulmak iÃ§in kÃ¶kleri hesapla
def find_eigenvalues(matrix):
    coeffs = determinant_equation(characteristic_equation(matrix))
    return np.roots(coeffs)

# ğŸ”¹ Manuel hesaplama ile Ã¶zdeÄŸer bulma
print("\nğŸ”¹ Manuel YÃ¶ntem ile Hesaplama")
eigenvalues_manual = find_eigenvalues(A.tolist())  # NumPy array'i listeye Ã§evir
print("Ã–zdeÄŸerler:", eigenvalues_manual)

# ğŸ”¹ Her iki yÃ¶ntemin karÅŸÄ±laÅŸtÄ±rÄ±lmasÄ±
print("\nğŸ”¹ KarÅŸÄ±laÅŸtÄ±rma")
for i in range(len(eigenvalues_np)):
    print(f"NumPy: {eigenvalues_np[i]:.4f} vs. Manuel: {eigenvalues_manual[i]:.4f}")
